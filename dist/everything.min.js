var gameLogic;!function(a){function b(){var a=[["-","-","","","B","","","-","-"],["-","","","B","B","B","","","-"],["","","B","B","B","B","B","",""],["","B","B","B","B","B","B","B",""],["","","","","","","","",""],["","R","R","R","R","R","R","R",""],["","","R","R","R","R","R","",""],["-","","","R","R","R","","","-"],["-","-","","","R","","","-","-"]];return a}function c(a){return 0===a?"R":"B"}function d(a){return 0===a?"B":"R"}function e(a){for(var b={R:0,B:0},c=0;9>c;c++)for(var d=a[c],e=0;9>e;e++)"R"===d[e]?b.R++:"B"===d[e]&&b.B++;return b}function f(a){var b=e(a);return b.R<3&&b.B<3?!0:!1}function g(a,b,d){var f=e(a);if(b.length>0){if(0==d&&f.B<3||1==d&&f.R<3)for(var g=0;g<b.length;g++)if(!p(a,b[g].row,b[g].col,d))return c(d);return""}return f.R>=3&&f.B>=3?"":f.R>=3&&f.B<3?"B":f.B>=3&&f.R<3?"R":void 0}function h(a,b,c,d,e){for(var f=[],g=Math.max(b-2,0),h=Math.min(b+2,8),i=Math.max(c-2,0),j=Math.min(c+2,8),k=g;h>=k;k++)for(var l=i;j>=l;l++)try{var m=s(a,b,c,k,l,d,e);f.push(m)}catch(n){}return f}function i(a,b,d){for(var e=[],f=c(d),g=0;9>g;g++)for(var i=0;9>i;i++)a[g][i]===f&&(e=e.concat(h(a,g,i,b,d)));return e}function j(a,b,d){for(var e=[{r:0,c:1},{r:1,c:1},{r:1,c:0},{r:1,c:-1}],f=[],g=c(d),h=0;h<b.length;h++)for(var i=b[h].row,j=b[h].col,k=0;k<e.length;k++){var l=e[k],m=i+l.r,n=j+l.c,o=i-l.r,p=j-l.c;a[m]&&a[m][n]===g&&a[o]&&a[o][p]===g&&f.push({row:m,col:n},{row:o,col:p})}return f}function k(a,b,d){var e=c(d),f=[];if(a[4][4]===e)return[{row:4,col:4}];if(b.length>0)return j(a,b,d);for(var g=0;9>g;g++)for(var h=0;9>h;h++)a[g][h]===e&&f.push({row:g,col:h});return f}function l(a,b,c,d,e){for(var f=k(a,d,e),g=0;g<f.length;g++){var h=f[g];if(b===h.row&&c===h.col)return!0}return!1}function m(a,b,c,d,e){for(var f=h(a,b,c,d,e),g=[],i=0;i<f.length;i++){var j=f[i];g.push({row:j[2].set.value.to_row,col:j[2].set.value.to_col})}return g}function n(a,b,c,e,f,g){var h=e-b,i=f-c,j=0===h?0:h/Math.abs(h),k=0===i?0:i/Math.abs(i),l=b+j,m=c+k;if(Math.abs(h)>1||Math.abs(i)>1){var n=h+i;return 4>=n&&n%2===0&&a[l]&&a[l][m]===d(g)?!0:!1}return!0}function o(a,b,c,d){for(var e=0;e<d.length;e++){var f=d[e];if(b===f.row&&c===f.col)return!0}return!1}function p(a,b,c,e){for(var f=[{r:0,c:1},{r:1,c:1},{r:1,c:0},{r:1,c:-1}],g=d(e),h=0;h<f.length;h++){var i=f[h];if(a[b+i.r]&&a[b+i.r][c+i.c]===g&&a[b-i.r]&&a[b-i.r][c-i.c]===g)return!0}return!1}function q(a,b,d,e,f){var g=[],h=[{r:0,c:1},{r:1,c:1},{r:1,c:0},{r:1,c:-1}];if(e.length>0)for(var i=0;i<e.length;i++){var j=e[i];p(a,j.row,j.col,f)&&g.push({row:j.row,col:j.col});for(var k=0;k<h.length;k++){var l=h[k],m=j.row+l.r,n=j.row-l.r,o=j.col+l.c,q=j.col-l.c;a[m][o]===c(f)&&p(a,m,o,f)?g.push({row:m,col:o}):a[n][q]===c(f)&&p(a,n,q,f)&&g.push({row:n,col:q})}}else p(a,b,d,f)&&g.push({row:b,col:d});return g}function r(a,b,e,f){for(var g=[{r:0,c:1},{r:1,c:1},{r:1,c:0},{r:1,c:-1}],h=c(f),i=d(f),j=[],k=0;k<g.length;k++){var l=g[k];a[b+l.r]&&a[b+l.r][e+l.c]===i&&a[b+2*l.r]&&a[b+2*l.r][e+2*l.c]===h&&j.push({row:b+l.r,col:e+l.c})}for(var k=0;k<g.length;k++){var l=g[k];a[b-l.r]&&a[b-l.r][e-l.c]===i&&a[b-2*l.r]&&a[b-2*l.r][e-2*l.c]===h&&j.push({row:b-l.r,col:e-l.c})}return j}function s(a,d,e,h,i,j,k){void 0===a&&(a=b());var m=c(k);if(void 0===a[d]||a[d][e]!==m)throw new Error("One can only move his own pawn!");if(a[4][4]===m&&4!==d&&4!==e)throw new Error("One can only move his own pawn from the center block!");if(void 0===a[h]||""!==a[h][i])throw new Error("One can only make a move in an empty position.");if(""!==g(a,j,k)||f(a))throw new Error("One can only make a move if the game is not over!");if(!l(a,d,e,j,k))throw new Error("One can only capture using one of the capturing pawns.");if(!n(a,d,e,h,i,k))throw new Error("One can only make a one step move or jump once over opponent's pawn.");if(j&&j.length>0&&!o(a,h,i,j))throw new Error("One can only move a pawn to a captured pawn.");var p,s=angular.copy(a),t=!1,u={};s[d][e]="";var v=r(s,h,i,k),w=q(s,h,i,j,k);if(j=[],4!==h||4!==i){if(s[h][i]=m,w.length>0&&0===v.length){for(p=0;p<w.length;p++)s[w[p].row][w[p].col]="";j=w,t=!0}else if(j=v,0===j.length)t=!0;else for(p=0;p<j.length;p++){var x=j[p];s[x.row][x.col]=""}var y=g(s,j,k);u=""!==y||f(s)?{endMatch:{endMatchScores:"R"===y?[1,0]:"B"===y?[0,1]:[0,0]}}:t?{setTurn:{turnIndex:1-k}}:{setTurn:{turnIndex:k}}}else u={setTurn:{turnIndex:k}},s[4][4]=m;return[u,{set:{key:"board",value:s}},{set:{key:"delta",value:{from_row:d,from_col:e,to_row:h,to_col:i}}},{set:{key:"captures",value:j}}]}function t(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove;try{var e=b[2].set.value,f=e.from_row,g=e.from_col,h=e.to_row,i=e.to_col,j=d.captures||[],k=d.board,l=s(k,f,g,h,i,j,c);if(!angular.equals(b,l))return!1}catch(m){return!1}return!0}a.getInitialBoard=b,a.getOppositePawnByTurn=d,a.getPossibleMoves=i,a.getValidFromPositions=k,a.getValidToPositions=m,a.createMove=s,a.isMoveOk=t}(gameLogic||(gameLogic={}));var game;!function(a){function b(){C=document.getElementById("gameArea"),dragAndDropService.addDragListener("gameArea",c),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:i})}function c(a,b,c){var h=e(),i=Math.min(Math.max(b-C.offsetLeft,0),C.clientWidth-h.width),j=Math.min(Math.max(c-C.offsetTop,0),C.clientHeight-h.height),l=Math.floor(w*j/C.clientHeight),m=Math.floor(x*i/C.clientWidth);if("touchstart"!==a||A||k(l,m)&&$rootScope.$apply(function(){z={row:l,col:m},A=document.getElementById("e2e_test_piece_"+z.row+"x"+z.col),A.style.zIndex=y+""}),A){if("touchend"===a){var n=z,o={row:l,col:m};g(n,o)}else d(f(l,m));("touchend"===a||"touchcancel"===a||"touchleave"===a)&&(B?setTimeout(function(){A.style.display="none",A.style.left="",A.style.top="",A.style.display="block",A=null},100):(A.style.left="",A.style.top="",A=null),z=null)}}function d(a){var b=f(z.row,z.col),c=e();A.style.left=a.left-b.left+.15*c.width+"px",A.style.top=a.top-b.top+.15*c.height+"px"}function e(){return{width:C.clientWidth/x,height:C.clientHeight/w}}function f(a,b){var c=e();return{top:a*c.height,left:b*c.width}}function g(a,b){k(b.row,b.col),$rootScope.$apply()}function h(){var a=gameLogic.getPossibleMoves(t,r,n);gameService.makeMove(a[Math.floor(Math.random()*a.length)])}function i(a){t=a.stateAfterMove.board,u=a.stateAfterMove.delta,r=a.stateAfterMove.captures||[],void 0===t&&(t=gameLogic.getInitialBoard(),v="playBlack"===a.playMode?!0:!1),p=gameLogic.getValidFromPositions(t,r,a.turnIndexAfterMove),o&&4===o.row&&4===o.col&&(q=gameLogic.getValidToPositions(t,4,4,r,n)),s=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,n=a.turnIndexAfterMove,s&&""===a.playersInfo[a.yourPlayerIndex].playerId&&(s=!1,$timeout(h,500))}function j(a,b){for(var c=0;c<p.length;c++){var d=p[c];if(a===d.row&&b===d.col)return!0}return!1}function k(a,b){if(v&&(a=8-a,b=8-b),log.info(["Clicked on cell:",a,b,s]),!s)return!1;if("?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(j(a,b))o={row:a,col:b},q=gameLogic.getValidToPositions(t,a,b,r,n);else if(null!==o)try{var c=o,d=gameLogic.createMove(t,c.row,c.col,a,b,r,n);4===a&&4===b?o={row:4,col:4}:(o=null,q=[]),B=!0,s=!1,gameService.makeMove(d)}catch(e){return log.info(["Cell is already full in position:",a,b]),!1}return!0}function l(a,b){v&&(a=8-a,b=8-b);var c=["block"];if("-"===m(a,b))c.push("empty");else{if(4===a&&4===b&&c.push("center"),o&&o.row===a&&o.col===b&&c.push("selected"),j(a,b))c.push("valid");else for(var d=0;d<q.length;d++){var e=q[d];if(a===e.row&&b===e.col){c.push("validTo");break}}for(var d=0;d<r.length;d++)e=r[d],a===e.row&&b===e.col&&c.push("captured",gameLogic.getOppositePawnByTurn(n))}return c}function m(a,b){return v&&(a=8-a,b=8-b),t[a][b]}var n,o=null,p=[],q=[],r=[],s=!1,t=null,u=null,v=!1,w=9,x=9,y=81,z=null,A=null,B=!1,C=null;a.isHelpModalShown=!1,a.init=b,a.getBlockClass=l,a.getPiece=m}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run(function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_BILOBA:"Rules of Biloba",RULES_SLIDE1:"Biloba is an abstract strategy board game for 2 players. On each turn, each player moves one friendly stone. A stone may move to an (orthogonal or diagonal) adjacent empty cell.",RULES_SLIDE2:"If a stone moves to the center cell, it must move again to an adjacent empty cell (no stone may stay at the center). A stone may also jump over one stone (of either color) landing on the immediate next empty cell.",RULES_SLIDE3:"An enemy stone is captured when sandwiched between two friendly stones (orthogonal or diagonal). After the removal of the captured stone, one of the two friendly stones must move to occupy the captured stone position.",RULES_SLIDE4:"A player loses if, at the beginning of his turn, he has less than three stones and is unable to capture enemy stones so that his opponent also have less than three stones. In this later case, the game is a draw.",CLOSE:"Close"}),game.init()});var aiService;!function(a){function b(a,b,f,g){return alphaBetaService.alphaBetaDecision([null,{set:{key:"board",value:a}},null,{set:{key:"captures",value:b}}],f,d,c,"?debug"===window.location.search?e:null,g)}function c(a){if(a[0].endMatch){var b=a[0].endMatch.endMatchScores;return b[0]>b[1]?Number.POSITIVE_INFINITY:b[0]<b[1]?Number.NEGATIVE_INFINITY:0}return 0}function d(a,b){var c=gameLogic.getPossibleMoves(a[1].set.value,a[3].set.value,b);return c}function e(a){return"\n"+a[1].set.value.join("\n")+"\n"}a.createComputerMove=b}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map